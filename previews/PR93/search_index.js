var documenterSearchIndex = {"docs":
[{"location":"manual/#Manual","page":"Manual","title":"Manual","text":"","category":"section"},{"location":"manual/#Why-use-parameters?","page":"Manual","title":"Why use parameters?","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"A typical optimization model built using MathOptInterface.jl (MOIfor short) has two main components:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Variables\nConstants","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"Using these basic elements, one can create functions and sets that, together, form the desired optimization model. The goal of POI is the implementation of a third type, parameters, which","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"are declared similar to a variable, and inherits some functionalities (e.g. dual calculation)\nacts like a constant, in the sense that it has a fixed value that will remain the same unless explicitely changed by the user","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"A main concern is to efficiently implement this new type, as one typical usage is to change its value to analyze the model behavior, without the need to build a new one from scratch.","category":"page"},{"location":"manual/#How-it-works","page":"Manual","title":"How it works","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"The main idea applied in POI is that the interaction between the solver, e.g. GLPK, and the optimization model will be handled by MOI as usual. Because of that, POI is a higher level wrapper around MOI, responsible for receiving variables, constants and parameters, and forwarding to the lower level model only variables and constants.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"As POI receives parameters, it must analyze and decide how they should be handled on the lower level optimization model (the MOI model).","category":"page"},{"location":"manual/#Usage","page":"Manual","title":"Usage","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"In this manual we describe how to interact with the optimization model at the MOI level. In the Examples section you can find some tutorials with the JuMP usage.","category":"page"},{"location":"manual/#Supported-constraints","page":"Manual","title":"Supported constraints","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"This is a list of supported MOI constraint functions that can handle parameters. If you try to add a parameter to a function that is not listed here, it will return an unsupported error.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI Function\nScalarAffineFunction\nScalarQuadraticFunction","category":"page"},{"location":"manual/#Supported-objective-functions","page":"Manual","title":"Supported objective functions","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI Function\nScalarAffineFunction\nScalarQuadraticFunction","category":"page"},{"location":"manual/#Declare-a-Optimizer","page":"Manual","title":"Declare a Optimizer","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"In order to use parameters, the user needs to declare a ParametricOptInterface.Optimizer on top of a MOI optimizer, such as HiGHS.Optimizer().","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"using ParametricOptInterface, MathOptInterface, HiGHS\n# Rename ParametricOptInterface and MathOptInterface to simplify the code\nconst POI = ParametricOptInterface\nconst MOI = MathOptInterface\n# Define a Optimizer on top of the MOI optimizer\noptimizer = POI.Optimizer(HiGHS.Optimizer())","category":"page"},{"location":"manual/#Parameters","page":"Manual","title":"Parameters","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"A ParametricOptInterface.Parameter is a variable with a fixed value that can be changed by the user.","category":"page"},{"location":"manual/#Adding-a-new-parameter-to-a-model","page":"Manual","title":"Adding a new parameter to a model","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"To add a parameter to a model, we must use the MOI.add_constrained_variable() function, passing as its arguments the model and a ParametricOptInterface.Parameter with its given value:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"y, cy = MOI.add_constrained_variable(optimizer, POI.Parameter(0))","category":"page"},{"location":"manual/#Changing-the-parameter-value","page":"Manual","title":"Changing the parameter value","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"To change a given parameter's value, access its VariableIndex and set it to the new value using the ParametricOptInterface.Parameter structure.","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI.set(optimizer, POI.ParameterValue(), y, POI.Parameter(2.0))","category":"page"},{"location":"manual/#Retrieving-the-dual-of-a-parameter","page":"Manual","title":"Retrieving the dual of a parameter","text":"","category":"section"},{"location":"manual/","page":"Manual","title":"Manual","text":"Given an optimized model, one can calculate the dual associated to a parameter, as long as it is an additive term in the constraints or objective. One can do so by getting the MOI.ConstraintDual attribute of the paraameter's MOI.ConstraintIndex:","category":"page"},{"location":"manual/","page":"Manual","title":"Manual","text":"MOI.get(optimizer, POI.ParameterDual(), y)","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"ParametricOptInterface.ConstraintInterpretation\nParametricOptInterface.Optimizer\nParametricOptInterface.Parameter\nParametricOptInterface.ParameterDual\nParametricOptInterface.ParameterValue","category":"page"},{"location":"reference/#ParametricOptInterface.Optimizer","page":"Reference","title":"ParametricOptInterface.Optimizer","text":"Optimizer{T, OT <: MOI.ModelLike} <: MOI.AbstractOptimizer\n\nDeclares a Optimizer, which allows the handling of parameters in a optimization model.\n\nKeyword arguments\n\nevaluate_duals::Bool: If true, evaluates the dual of parameters. Users might want to set it to false  to increase performance when the duals of parameters are not necessary. Defaults to true.\nconstraints_interpretation: Decides how to interpret constraints with ScalarAffineFunctions. More details are in POI.ConstraintsInterpretation and JuMP Example - Dealing with parametric expressions as variable bounds. Defaults to OnlyConstraints.\n\nExample\n\njulia> ParametricOptInterface.Optimizer(GLPK.Optimizer())\nParametricOptInterface.Optimizer{Float64,GLPK.Optimizer}\n\n\n\n\n\n","category":"type"},{"location":"reference/#ParametricOptInterface.Parameter","page":"Reference","title":"ParametricOptInterface.Parameter","text":"Parameter(val::Float64)\n\nThe Parameter structure stores the numerical value associated to a given parameter.\n\nExample\n\njulia> ParametricOptInterface.Parameter(5)\nParametricOptInterface.Parameter(5)\n\n\n\n\n\n","category":"type"},{"location":"reference/#ParametricOptInterface.ParameterDual","page":"Reference","title":"ParametricOptInterface.ParameterDual","text":"ParameterDual <: MOI.AbstractVariableAttribute\n\nAttribute defined to get the dual values associated to parameters\n\nExample\n\nMOI.get(model, POI.ParameterValue(), p)\n\n\n\n\n\n","category":"type"},{"location":"reference/#ParametricOptInterface.ParameterValue","page":"Reference","title":"ParametricOptInterface.ParameterValue","text":"ParameterValue <: MOI.AbstractVariableAttribute\n\nAttribute defined to set and get parameter values\n\nExample\n\nMOI.set(model, POI.ParameterValue(), p, 2.0)\nMOI.get(model, POI.ParameterValue(), p)\n\n\n\n\n\n","category":"type"},{"location":"#ParametricOptInterface.jl-Documentation","page":"Home","title":"ParametricOptInterface.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ParametricOptInterface.jl (POI for short) is a package written on top of MathOptInterface.jl that allows users to add parameters to a MOI/JuMP problem explicitely.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the package you can use Pkg.add as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add ParametricOptInterface","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When contributing please note that the package follows the JuMP style guide.","category":"page"},{"location":"example/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"example/#MOI-example-step-by-step-usage","page":"Examples","title":"MOI example - step by step usage","text":"","category":"section"},{"location":"example/","page":"Examples","title":"Examples","text":"Lets write a setep-by-step example of POI usage at the MOI level.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"First, we declare a ParametricOptInterface.Optimizer on top of a MOI optimizer. In the example, we consider HiGHS as the underlying solver:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"using HiGHS\nusing MathOptInterface\nusing ParametricOptInterface\n\nconst MOI = MathOptInterface\nconst POI = ParametricOptInterface\n\noptimizer = POI.Optimizer(HiGHS.Optimizer())","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"We declare the variable x as in a typical MOI model, and we add a non-negativity constraint:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"x = MOI.add_variables(optimizer, 2)\nfor x_i in x\n    MOI.add_constraint(optimizer, x_i, MOI.GreaterThan(0.0))\nend","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Now, let's consider 3 ParametricOptInterface.Parameter. Two of them, y, z, will be placed in the constraints and one, w, in the objective function. We'll start all three of them with a value equal to 0:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"w, cw = MOI.add_constrained_variable(optimizer, POI.Parameter(0))\ny, cy = MOI.add_constrained_variable(optimizer, POI.Parameter(0))\nz, cz = MOI.add_constrained_variable(optimizer, POI.Parameter(0))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Let's add the constraints. Notice that we treat parameters and variables in the same way when building the functions that will be placed in some set to create a constraint (Function-in-Set):","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"cons1 = MOI.ScalarAffineFunction(MOI.ScalarAffineTerm.([2.0, 1.0, 3.0], [x[1], x[2], y]), 0.0)\nci1 = MOI.add_constraint(optimizer, cons1, MOI.LessThan(4.0))\ncons2 = MOI.ScalarAffineFunction(MOI.ScalarAffineTerm.([1.0, 2.0, 0.5], [x[1], x[2], z]), 0.0)\nci2 = MOI.add_constraint(optimizer, cons2, MOI.LessThan(4.0))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Finally, we declare and add the objective function, with its respective sense:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"obj_func = MOI.ScalarAffineFunction(MOI.ScalarAffineTerm.([4.0, 3.0, 2.0], [x[1], x[2], w]), 0.0)\nMOI.set(optimizer, MOI.ObjectiveFunction{MOI.ScalarAffineFunction{Float64}}(), obj_func)\nMOI.set(optimizer, MOI.ObjectiveSense(), MOI.MAX_SENSE)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Now we can optimize the model and assess its termination and primal status:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.optimize!(optimizer)\nMOI.get(optimizer, MOI.TerminationStatus())\nMOI.get(optimizer, MOI.PrimalStatus())","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Given the optimized solution, we check that its value is, as expected, equal to 28/3, and the solution vector x is [4/3, 4/3]:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"isapprox(MOI.get(optimizer, MOI.ObjectiveValue()), 28/3, atol = 1e-4)\nisapprox(MOI.get(optimizer, MOI.VariablePrimal(), x[1]), 4/3, atol = 1e-4)\nisapprox(MOI.get(optimizer, MOI.VariablePrimal(), x[2]), 4/3, atol = 1e-4)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"We can also retrieve the dual values associated to each parameter, as they are all additive:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.get(optimizer, MOI.ConstraintDual(), cy)\nMOI.get(optimizer, MOI.ConstraintDual(), cz)\nMOI.get(optimizer, MOI.ConstraintDual(), cw)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Notice the direct relationship in this case between the parameters' duals and the associated constraints' duals. The  y parameter, for example, only appears in the cons1. If we compare their duals, we can check that the dual of y is equal to its coefficient in cons1 multiplied by the constraint's dual itself, as expected:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"isapprox(MOI.get(optimizer, MOI.ConstraintDual(), cy), 3*MOI.get(optimizer, MOI.ConstraintDual(), ci1), atol = 1e-4)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"The same is valid for the remaining parameters. In case a parameter appears in more than one constraint, or both some constraints and in the objective function, its dual will be equal to the linear combination of the functions' duals multiplied by the respective coefficientes.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"So far, we only added some parameters that had no influence at first in solving the model. Let's change the values associated to each parameter to assess its implications. First, we set the value of parameters y and z to 1.0. Notice that we are changing the feasible set of the decision variables:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.set(optimizer, POI.ParameterValue(), y, 1.0)\nMOI.set(optimizer, POI.ParameterValue(), z, 1.0)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"However, if we check the optimized model now, there will be no changes in the objective function value or the in the optimized decision variables:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"isapprox.(MOI.get(optimizer, MOI.ObjectiveValue()), 28/3, atol = 1e-4)\nisapprox.(MOI.get(optimizer, MOI.VariablePrimal(), x[1]), 4/3, atol = 1e-4)\nisapprox.(MOI.get(optimizer, MOI.VariablePrimal(), x[2]), 4/3, atol = 1e-4)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Although we changed the parameter values, we didn't optimize the model yet. Thus, to apply the parameters' changes, the model must be optimized again:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.optimize!(optimizer)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"The MOI.optimize!() function handles the necessary updates, properly fowarding the new outer model (POI model) additions to the inner model (MOI model) which will be handled by the solver. Now we can assess the updated optimized information:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"isapprox.(MOI.get(optimizer, MOI.ObjectiveValue()), 3.0, atol = 1e-4)\nMOI.get.(optimizer, MOI.VariablePrimal(), x) == [0.0, 1.0]","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"If we update the parameter w, associated to the objective function, we are simply adding a constant to it. Notice how the new objective function is precisely equal to the previous one plus the new value of w. In addition, as we didn't update the feasible set, the optimized decision variables remain the same.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.set(optimizer, POI.ParameterValue(), w, 2.0)\n# Once again, the model must be optimized to incorporate the changes\nMOI.optimize!(optimizer)\n# Only the objective function value changes\nisapprox.(MOI.get(optimizer, MOI.ObjectiveValue()), 7.0, atol = 1e-4)\nMOI.get.(optimizer, MOI.VariablePrimal(), x) == [0.0, 1.0]","category":"page"},{"location":"example/#JuMP-Example-step-by-step-usage","page":"Examples","title":"JuMP Example - step by step usage","text":"","category":"section"},{"location":"example/","page":"Examples","title":"Examples","text":"Lets write a setep-by-step example of POI usage at the JuMP level.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"First, we declare a Model on top of a Optimizer of an underlying solver. In the example, we consider HiGHS as the underlying solver:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"using HiGHS\nusing JuMP\n\nusing ParametricOptInterface\nconst POI = ParametricOptInterface\n\nmodel = Model(() -> ParametricOptInterface.Optimizer(HiGHS.Optimizer()))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"We declare the variable x as in a typical JuMP model:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"@variable(model, x[i = 1:2] >= 0)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Now, let's consider 3 ParametricOptInterface.Parameter. Two of them, y, z, will be placed in the constraints and one, w, in the objective function. We'll start all three of them with a value equal to 0:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"@variable(model, y in ParametricOptInterface.Parameter(0))\n@variable(model, z in ParametricOptInterface.Parameter(0))\n@variable(model, w in ParametricOptInterface.Parameter(0))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"let's add the constraints. Notice that we treat parameters the same way we treat variables when writing the model:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"@constraint(model, c1, 2x[1] + x[2] + 3y <= 4)\n@constraint(model, c2, x[1] + 2x[2] + 0.5z <= 4)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Finally, we declare and add the objective function, with its respective sense:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"@objective(model, Max, 4x[1] + 3x[2] + 2w)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"We can optimize the model and assess its termination and primal status:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"optimize!(model)\ntermination_status(model)\nprimal_status(model)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Given the optimized solution, we check that its value is, as expected, equal to 28/3, and the solution vector x is [4/3, 4/3]:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"isapprox(objective_value(model), 28/3)\nisapprox(value.(x), [4/3, 4/3])","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"We can also retrieve the dual values associated to each parameter, as they are all additive:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.get(model, POI.ParameterDual(), y)\nMOI.get(model, POI.ParameterDual(), z)\nMOI.get(model, POI.ParameterDual(), w)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Notice the direct relationship in this case between the parameters' duals and the associated constraints' duals. The y parameter, for example, only appears in the c1. If we compare their duals, we can check that the dual of y is equal to its coefficient in c1 multiplied by the constraint's dual itself, as expected:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"dual_of_y = MOI.get(model, POI.ParameterDual(), y)\nisapprox(dual_of_y, 3 * dual(c1))","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"The same is valid for the remaining parameters. In case a parameter appears in more than one constraint, or both some constraints and in the objective function, its dual will be equal to the linear combination of the functions' duals multiplied by the respective coefficientes.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"So far, we only added some parameters that had no influence at first in solving the model. Let's change the values associated to each parameter to assess its implications. First, we set the value of parameters y and z to 1.0. Notice that we are changing the feasible set of the decision variables:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.set(model, POI.ParameterValue(), y, 1)\nMOI.set(model, POI.ParameterValue(), z, 1)\n# We can also query the value in the parameters\nMOI.get(model, POI.ParameterValue(), y)\nMOI.get(model, POI.ParameterValue(), z)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"To apply the parameters' changes, the model must be optimized again:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"optimize!(model)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"The optimize! function handles the necessary updates, properly fowarding the new outer model (POI model) additions to the inner model (MOI model) which will be handled by the solver. Now we can assess the updated optimized information:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"isapprox(objective_value(model), 3)\nisapprox(value.(x), [0, 1])","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"If we update the parameter w, associated to the objective function, we are simply adding a constant to it. Notice how the new objective function is precisely equal to the previous one plus the new value of w. In addition, as we didn't update the feasible set, the optimized decision variables remain the same.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"MOI.set(model, POI.ParameterValue(), w, 2)\n# Once again, the model must be optimized to incorporate the changes\noptimize!(model)\n# Only the objective function value changes\nisapprox(objective_value(model), 7)\nisapprox(value.(x), [0, 1])","category":"page"},{"location":"example/#JuMP-Example-Declaring-vectors-of-parameters","page":"Examples","title":"JuMP Example - Declaring vectors of parameters","text":"","category":"section"},{"location":"example/","page":"Examples","title":"Examples","text":"Many times it is useful to declare a vector of parameters just like we declare a vector of variables, the JuMP syntax for variables works with parameters too:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"using HiGHS\nusing JuMP\nusing ParametricOptInterface\nconst POI = ParametricOptInterface\n\nmodel = Model(() -> ParametricOptInterface.Optimizer(HiGHS.Optimizer()))\n@variable(model, x[i = 1:3] >= 0)\n@variable(model, p1[i = 1:3] in ParametricOptInterface.Parameter(0))\n@variable(model, p2[i = 1:3] in ParametricOptInterface.Parameter.([1, 10, 45]))\n@variable(model, p3[i = 1:3] in ParametricOptInterface.Parameter.(ones(3)))","category":"page"},{"location":"example/#JuMP-Example-Dealing-with-parametric-expressions-as-variable-bounds","page":"Examples","title":"JuMP Example - Dealing with parametric expressions as variable bounds","text":"","category":"section"},{"location":"example/","page":"Examples","title":"Examples","text":"A very common pattern that appears when using ParametricOptInterface is to add variable and later  add some expression with parameters that represent the variable bound. The following code illustrates the pattern:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"using HiGHS\nusing JuMP\nusing ParametricOptInterface\nconst POI = ParametricOptInterface\n\nmodel = direct_model(POI.Optimizer(HiGHS.Optimizer()))\n@variable(model, x)\n@variable(model, p in POI.Parameter(0.0))\n@constraint(model, x >= p)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Since parameters are treated like variables JuMP lowers this to MathOptInterface as x - p >= 0 which  is not a variable bound but a linear constraint. This means that the current representation of this problem at the solver level is:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"beginalign\n     min_x  0\n    \n     textst  x  in mathbbR\n        x - p  geq 0\nendalign","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"This behaviour might be undesirable because it creates extra rows in your problem. Users can  set the ParametricOptInterface.ConstraintsInterpretation to control how the linear  constraints should be interpreted. The pattern advised for users seeking the most performance  out of ParametricOptInterface should use the followig pattern:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"using HiGHS\nusing JuMP\nusing ParametricOptInterface\nconst POI = ParametricOptInterface\n\nmodel = direct_model(POI.Optimizer(HiGHS.Optimizer()))\n@variable(model, x)\n@variable(model, p in POI.Parameter(0.0))\n\n# Indicate that all the new constraints will be valid variable bounds\nMOI.set(model, POI.ConstraintsInterpretation(), POI.OnlyBounds)\n@constraint(model, x >= p);\n# It has a `;` because the prints don't work for this case.\n# It tries to print a ConstraintName of a linear constraint\n# but the constraint was transformed in `MOI.VariableIndex-in-MOI.GreaterThan`\n# and these kinds of constraints don't allow names.\n\n# Indicate that all the new constraints will not be variable bounds\nMOI.set(model, POI.ConstraintsInterpretation(), POI.OnlyConstraints)\n# @constraint(model, ...)","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"This way the mathematical representation of the problem will be:","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"beginalign\n     min_x  0\n    \n     textst  x  geq p\nendalign","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"which might lead to faster solves.","category":"page"},{"location":"example/","page":"Examples","title":"Examples","text":"Users that just want everything to work can use the default value POI.OnlyConstraints or try to use POI.BoundsAndConstraints and leave it to ParametricOptInterface to interpret the constraints as bounds  when applicable and linear constraints otherwise.","category":"page"}]
}
